#include <bits/stdc++.h>
using namespace std;

#define all(x) (x).begin() + 1, (x).end()
#define allr(x) (x).rbegin(), (x).rend()
#define gsize(x) (int)((x).size())
#define int long long
// #define endl '\n'
bool comparePairs(const pair<int, int> &a, const pair<int, int> &b)
{
    if (a.first != b.first)
        return a.first > b.first;
    return a.second < b.second;
}
#define optimize()                \
    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);
const int M = 1e6 + 7;

int poss(vector<int> &arr, int sum, int s)
{
    int e = gsize(arr) - 1;
    while (s <= e)
    {
        int mid = s + (e - s) / 2;
        if (sum + arr[mid] == 0) // or if you want to find a cartian number just change o to the wanted number
            return mid;
        else if (sum + arr[mid] > 0)
            e = mid - 1;
        else
            s = mid + 1;
    }
    return -1;
}
void solve()
{
    int n;
    cin >> n;
    vector<int> arr(n);
    for (auto &it : arr)
        cin >> it;
    sort(all(arr));
    for (auto it : arr)
        cout << it << ' ';
    cout << endl;

    for (int i = 0; i < n - 2; i++)
    {
        for (int j = i + 1; j < n - 1; j++)
        {
            int sum = arr[i] + arr[j];
            int p = poss(arr, sum, (j + 1));
            if (p != -1)
                cout << arr[i] << ' ' << arr[j] << ' ' << arr[p] << endl;
        }
    }
}
signed main()
{
    optimize();
    int n;
    cin >> n;
    while (n--)
    {
        solve();
    }

    return 0;
}
